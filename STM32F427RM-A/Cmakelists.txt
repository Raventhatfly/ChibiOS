cmake_minimum_required(VERSION 3.10)

include(config/toolchain.cmake)  # include cross compile configurations

set(CMAKE_CXX_STANDARD 11)

# Check dev board definition
# NOTICE: ${BOARD_NAME} needs to be specific externally
# NOTICE: if you want to adapt this project to a new board, be sure to also set startup file in compile_options.cmake
if (NOT DEFINED RM2018A)
    set(BOARD_NAME RM2018A)
endif ()

message("[Notice] Current profile is configurated for dev board \"${BOARD_NAME}\".")


project(Explorer ASM C CXX)

include(config/compile_options.cmake)

# =========== Options ===========

set(CMAKE_VERBOSE_MAKEFILE OFF)  # Enable this if you want to see verbose log

# =========== Common Files and Targets Configurations ===========

include(os/ch.cmake)  # add files and directories from ChibiOS

add_subdirectory(cmsis)

include_directories(dev/board_cfg)

add_library(ChibiOS OBJECT ${CHIBIOS_XASM_SRC} ${CHIBIOS_C_SRC} ${CHIBIOS_CPP_SRC} dev/board_cfg/board.c)

# ========================== Files and Targets Configurations ==========================
set(BUZZER_SRC
        dev/interface/buzzer/buzzer_scheduler.cpp
        dev/interface/buzzer/buzzer_interface.cpp)

include_directories(dev/interface/buzzer
        dev/interface/led)


set(LIGHT_LED_SRC
        dev/application/light_led/main.cpp
        dev/interface/led/led.cpp)

add_executable(LIGHT_LED
        ${LIGHT_LED_SRC})
target_include_directories(LIGHT_LED PRIVATE dev/application/light_led
        )
target_compile_definitions(LIGHT_LED PRIVATE LIGHT_LED)


set(PLAY_SOUND_SRC
        dev/application/play_sound/paly_sound.cpp
        dev/interface/led/led.cpp
        ${BUZZER_SRC}
)

add_executable(PLAY_SOUND
        ${PLAY_SOUND_SRC})
target_include_directories(PLAY_SOUND PRIVATE dev/application/play_sound)
target_compile_definitions(PLAY_SOUND PRIVATE PLAY_SOUND)


# ================================= Post Configurations for all targets =================================

# Make all targets compile to this filename to allow upload script to work properly
set(ELF_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build)
set(ELF_OUTPUT_NAME meta.elf)
message("[Notice] All executables are built to ${ELF_OUTPUT_PATH}/${ELF_OUTPUT_NAME}")

add_definitions(-DBUILD_TARGET_NAME="$<TARGET_PROPERTY:NAME>")

get_directory_property(TARGET_LIST BUILDSYSTEM_TARGETS)
foreach (target ${TARGET_LIST})
    if (NOT ${target} STREQUAL "ChibiOS" AND NOT ${target} STREQUAL "CMSIS_DSP")  # OBJECT library doesn't have PRE_BUILD or POST_BUILD
        # Add ChibiOS files and common sources
        target_sources(${target} PRIVATE $<TARGET_OBJECTS:ChibiOS> ${BASE_SRC})

        # Link CMSIS DSP
        target_link_libraries(${target} CMSIS_DSP)

        # Echo target dev board before link
        add_custom_command(TARGET ${target} PRE_BUILD
                COMMENT "Build for ${BOARD_NAME}")

        # Run size utility after link to show the size of elf file
        add_custom_command(TARGET ${target} POST_BUILD
                COMMAND echo
                COMMAND ${CMAKE_SIZE_UTILITY} ${ELF_OUTPUT_PATH}/${ELF_OUTPUT_NAME}
                COMMAND echo)  # execute size utility to show size of executable file

        # Set unique output file
        set_target_properties(${target} PROPERTIES
                RUNTIME_OUTPUT_DIRECTORY ${ELF_OUTPUT_PATH}
                OUTPUT_NAME ${ELF_OUTPUT_NAME})  #
    endif ()
endforeach (target)


